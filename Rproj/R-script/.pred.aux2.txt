.pred.aux2 <- function (S, coords, locations, borders, model, prior, output, 
    phi.posterior, link) 
{
    n.sim <- ncol(S)
    do.prediction <- ifelse(all(locations == "no"), FALSE, TRUE)
    if (do.prediction) {
        locations <- .check.locations(locations)
        if (!is.null(borders)) {
            ind.loc0 <- .geoR_inout(locations, borders)
            locations <- locations[ind.loc0, , drop = TRUE]
            if (nrow(locations) == 0) {
                warning("\n .pred.aux: no prediction to be performed.\n             There are no prediction locations inside the borders")
                do.prediction <- FALSE
            }
        }
        ni <- nrow(locations)
    }
    beta.size <- ncol(unclass(trend.spatial(trend = model$trend.d, 
        geodata = list(coords = coords))))
    lambda <- model$lambda
    temp.post <- list()
    temp.post$beta.mean <- array(NA, dim = c(beta.size, n.sim))
    temp.post$beta.var <- array(NA, dim = c(beta.size, beta.size, 
        n.sim))
    temp.post$S2 <- rep(0, n.sim)
    if (do.prediction) {
        temp.pred <- list()
        temp.pred$mean <- array(NA, dim = c(ni, n.sim))
        temp.pred$var <- array(NA, dim = c(ni, n.sim))
        if (output$sim.predict) {
            num.pred <- 1
            pred.simulations <- array(NA, dim = c(ni, n.sim))
        }
        else {
            num.pred <- 0
            pred.simulations <- " no simulations from the predictive distribution "
        }
    }
    else num.pred <- 0
    model.temp <- model
    model.temp$lambda <- 1
    output.temp <- list(n.posterior = 0, n.predictive = num.pred, 
        messages.screen = FALSE)
    prior.temp <- prior
    prior.temp$phi.prior <- "fixed"
    prior.temp$phi.discrete <- NULL
    prior.temp$tausq.rel.prior <- "fixed"
	prior.temp$thetaS.prior <- "fixed"
    prior.temp$priors.info <- NULL
    if (phi.posterior$phi.prior == "fixed" || length(phi.posterior$phi.discrete) == 
        1) {
        if (phi.posterior$phi.prior == "fixed") 
            prior.temp$phi <- phi.posterior$phi
        else prior.temp$phi <- phi.posterior$phi.discrete
		# Enki ------------------------------------------------------------ #
		print('Check 1.1: .pred.aux2')
        temp.result <- .krige.bayes.extnd2(data = S, coords = coords, 
            locations = locations, borders = borders, model = model.temp, 
            prior = prior.temp, output = output.temp)
        # ----------------------------------------------------------------- #
		temp.post$beta.mean <- temp.result$posterior$beta$pars$mean
        temp.post$beta.var <- temp.result$posterior$beta$pars$var
        temp.post$S2 <- temp.result$posterior$sigmasq$pars$S2
        if (do.prediction) {
            temp.pred$mean <- temp.result$predictive$mean
            temp.pred$var <- temp.result$predictive$variance
            if (output$sim.predict) {
                if (link == "logit") 
                  pred.simulations <- plogis(temp.result$predictive$simulations)
                else {
                  if (lambda == 0) 
                    pred.simulations <- exp(temp.result$predictive$simulations)
                  else pred.simulations <- .BC.inv(temp.result$predictive$simulations, 
                    lambda)
                }
            }
        }
    }
    else {
	print('Check 0: .pred.aux2')
        phi.discrete <- phi.posterior$phi.discrete
        len.phi.discrete <- length(phi.discrete)
        step.phi.discrete <- phi.discrete[2] - phi.discrete[1]
        phi.table <- rep(0, len.phi.discrete)
        for (i in seq(length = len.phi.discrete)) {
            phi.table[i] <- sum(ifelse(abs(phi.posterior$sample - 
                phi.discrete[i]) < 0.5 * step.phi.discrete, 1, 
                0))
        }
        phi.sample.unique <- phi.discrete[phi.table > 0]
        phi.table <- phi.table[phi.table > 0]
        len.phi.un <- length(phi.sample.unique)
        indic.phi <- array(rep(0, len.phi.un * max(phi.table)), 
            dim = c(len.phi.un, max(phi.table)))
        for (i in seq(length = len.phi.un)) {
            temp.num <- which(abs(phi.posterior$sample - phi.sample.unique[i]) < 
                0.5 * step.phi.discrete)
            indic.phi[i, seq(along = temp.num)] <- temp.num
        }
        for (i in seq(length = len.phi.un)) {
            id.phi.i <- indic.phi[i, seq(length = phi.table[i])]
            prior.temp$phi <- phi.sample.unique[i]
            if (phi.table[i] == 1) {
                temp.result <- krige.bayes2(data = S[, id.phi.i], 
                  coords = coords, locations = locations, borders = borders, 
                  model = model.temp, prior = prior.temp, output = output.temp)
            } else {
			#temp.result <- .krige.bayes.extnd(data = S[, 
            #    id.phi.i], coords = coords, locations = locations, 
            #    borders = borders, model = model.temp, prior = prior.temp, 
            #    output = output.temp)
			# Enki ------------------------------------------------------------ #
			print('Check 1.2: .pred.aux2')
			temp.result <- .krige.bayes.extnd2(data = S[,id.phi.i], coords = coords, 
              locations = locations, borders = borders, model = model.temp, 
              prior = prior.temp, output = output.temp)
			# ----------------------------------------------------------------- #				
        }
			temp.post$beta.mean[, id.phi.i] <- temp.result$posterior$beta$pars$mean
            temp.post$beta.var[, , id.phi.i] <- temp.result$posterior$beta$pars$var
            temp.post$S2[id.phi.i] <- temp.result$posterior$sigmasq$pars$S2
            if (do.prediction) {
                temp.pred$mean[, id.phi.i] <- temp.result$predictive$mean
                temp.pred$var[, id.phi.i] <- temp.result$predictive$variance
                if (output$sim.predict) {
                  if (link == "logit") 
                    pred.simulations[, id.phi.i] <- plogis(temp.result$predictive$simulations)
                  else {
                    if (lambda == 0) 
                      pred.simulations[, id.phi.i] <- exp(temp.result$predictive$simulations)
                    else pred.simulations[, id.phi.i] <- .BC.inv(temp.result$predictive$simulations, 
                      lambda)
                  }
                }
            }
        }
    }
    remove("temp.result")
    if (do.prediction) 
        return(list(temp.post = temp.post, temp.pred = temp.pred, 
            pred.simulations = pred.simulations))
    else return(list(temp.post = temp.post))
}
