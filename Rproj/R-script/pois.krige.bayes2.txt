"pois.krige.bayes2" <- function (geodata, coords = geodata$coords, data = geodata$data, 
    units.m = "default", locations = "no", borders, model, prior, 
    mcmc.input, output) 
{
    if (missing(geodata)) 
        geodata <- list(coords = coords, data = data, units.m = units.m)
    if (missing(borders)) 
        borders <- geodata$borders
    call.fc <- match.call()
    seed <- get(".Random.seed", envir = .GlobalEnv, inherits = FALSE)
    do.prediction <- ifelse(all(locations == "no"), FALSE, TRUE)
    if (is.vector(coords)) {
        coords <- cbind(coords, 0)
        warning("vector of coordinates: one spatial dimension assumed")
    }
    coords <- as.matrix(coords)
    if (nrow(coords) != length(data)) 
        stop("number of data is different of number of data locations (coordinates)")
    n <- length(data)
    if (any(units.m == "default")) {
        if (!is.null(geodata$units.m)) 
            units.m <- geodata$units.m
        else units.m <- rep(1, n)
    }
    if (any(units.m <= 0)) 
        stop("units.m must be positive")
    if (missing(model)) 
        model <- model.glm.control()
    else model <- .model.glm.check.aux(model, fct = "pois.krige.bayes")
    cov.model <- model$cov.model
    kappa <- model$kappa
    tausq.rel <- prior$tausq.rel
	lambda <- model$lambda
    if (lambda < 0) 
        stop("lambda < 0 is not allowed")
    # Enki ----------------- #
	thetaS <- prior$thetaS
	# ---------------------- #
    if (missing(prior)) 
        stop("pois.krige.bayes: argument prior must be given")
    else prior <- .prior.glm.check.aux(prior, fct = "pois.krige.bayes")
	beta.prior <- prior$beta.prior
    beta <- prior$beta
    beta.var <- prior$beta.var.std
    sigmasq.prior <- prior$sigmasq.prior
    if (sigmasq.prior == "fixed") 
        sigmasq <- prior$sigmasq
    else {
        df.sigmasq <- prior$df.sigmasq
        S2.prior <- prior$sigmasq
    }
    phi.prior <- prior$phi.prior
    phi <- prior$phi
    if (phi.prior != "fixed") 
        phi.discrete <- prior$phi.discrete
    else phi.discrete <- phi
    if (missing(output)) 
        output <- output.glm.control()
    else output <- .output.glm.check.aux(output, fct = "pois.krige.bayes")
    quantile.estimator <- output$quantile.estimator
    probability.estimator <- output$probability.estimator
    inference <- output$inference
    messages.screen <- output$messages.screen
    data.dist <- as.vector(dist(coords))
    if (round(1e+12 * min(data.dist)) == 0) 
        stop("Two coords are identical; not allowed.")
    trend.d <- model$trend.d
    if (messages.screen) {
        cat(switch(as.character(trend.d)[1], cte = "pois.krige.bayes: model with mean being constant", 
            `1st` = "pois.krige.bayes: model with mean given by a 1st order polynomial on the coordinates", 
            `2nd` = "pois.krige.bayes: model with mean given by a 2nd order polynomial on the coordinates", 
            "pois.krige.bayes2: model with mean defined by covariates provided by the user"))
        cat("\n")
    }
    trend.data <- unclass(trend.spatial(trend = trend.d, geodata = geodata))
    dimnames(coords) <- list(NULL, NULL)
    dimnames(trend.data) <- list(NULL, NULL)
    beta.size <- ncol(trend.data)
    if (nrow(trend.data) != n) 
        stop("length of trend is different from the length of the data")
    if (beta.size > 1) 
        beta.names <- paste("beta", (0:(beta.size - 1)), sep = "")
    else beta.names <- "beta"
    if (beta.prior == "normal" | beta.prior == "fixed") {
        if (beta.size != length(beta)) 
            stop("pois.krige.bayes: size of beta incompatible with the trend model (covariates)")
    }
	if (ncol(coords) == 3){
	Scoords = coords[,1:2]
	Tcoords = as.matrix(coords[,3],ncol=1)
	dim(Tcoords)
	}
    aniso.pars <- model$aniso.par
    if (!is.null(aniso.pars)) 
        Scoords.transf <- coords.aniso(coords = Scoords, aniso.pars = aniso.pars)
    else Scoords.transf <- Scoords

    if ((inference) & (do.prediction)) {
        locations <- .check.locations(locations)
        trend.l <- model$trend.l
        if (length(unique(locations[, 1])) == 1 | length(unique(locations[, 
            2])) == 1) 
            krige1d <- TRUE
        else krige1d <- FALSE
        if (is.null(trend.l)) 
            stop("trend.l needed for prediction")
        if (inherits(trend.d, "formula") | inherits(trend.l, 
            "formula")) {
            if ((!inherits(trend.d, "formula")) | (!inherits(trend.l, 
                "formula"))) 
                stop("trend.d and trend.l must have similar specification\n")
        }
        else {
            if ((class(trend.d) == "trend.spatial") & (class(trend.l) == 
                "trend.spatial")) {
                if (ncol(trend.d) != ncol(trend.l)) 
                  stop("trend.d and trend.l do not have the same number of columns")
            }
            else if (trend.d != trend.l) 
                stop("trend.l is different from trend.d")
        }
        if (nrow(unclass(trend.spatial(trend = trend.l, geodata = list(coords = locations)))) != 
            nrow(locations)) 
            stop("pois.krige.bayes: number of points to be estimated is different of the number of trend locations")
        if (!is.null(borders)) {
            ind.loc0 <- .geoR_inout(locations, borders)
            if (!any(ind.loc0)) {
                warning("\n pois.krige.bayes: no prediction to be performed.\n             There are no prediction locations inside the borders")
                do.prediction <- FALSE
            }
        }
        kb.results <- list(posterior = list(), predictive = list())
    }
    else {
        if (do.prediction & messages.screen) 
            cat(paste("need to specify inference=TRUE to make predictions \n"))
        kb.results <- list(posterior = list(), predictive = paste("prediction not performed"))
        do.prediction <- FALSE
    }
    if (missing(mcmc.input)) 
        stop("pois.krige.bayes: argument mcmc.input must be given")
    mcmc.input <- .mcmc.check.aux(mcmc.input, fct = "pois.krige.bayes")
    if (beta.prior == "fixed" | beta.prior == "normal") 
        mean.d <- as.vector(trend.data %*% beta)
    else mean.d <- rep(0, n)
    if (sigmasq.prior != "fixed") {
        if (beta.prior == "flat") 
            df.model <- n - beta.size + df.sigmasq
        else df.model <- n + df.sigmasq
    }
    else df.model <- Inf
    if (beta.prior == "normal") {
        if (beta.size > 1) 
            ttvbetatt <- trend.data %*% beta.var %*% t(trend.data)
        else ttvbetatt <- crossprod(t(trend.data)) * beta.var
    }
    else ttvbetatt <- matrix(0, n, n)
    if (sigmasq.prior == "fixed") {
        invcov <- varcov.spatial2(coords = coords, cov.model = cov.model, 
            kappa = kappa, nugget = tausq.rel * sigmasq, thetaS0 = thetaS, cov.pars = c(sigmasq, 
                phi), inv = TRUE, func.inv = "cholesky", try.another.decomposition = FALSE)$inverse
        if (beta.prior != "fixed") {
            ivtt <- invcov %*% trend.data
            if (beta.prior == "normal") 
                invcov <- invcov - ivtt %*% .solve.geoR(crossprod(trend.data, 
                  ivtt) + solve(beta.var), t(ivtt))
            else invcov <- invcov - ivtt %*% .solve.geoR(crossprod(trend.data, 
                ivtt), t(ivtt))
        }
    }
    if ((phi.prior == "fixed") & (sigmasq.prior != "fixed")) {
        phi.prior.prob <- 1
        phi.discrete <- phi
    }
    else phi.prior.prob <- prior$priors.info$phi$probs
    if (sigmasq.prior == "fixed") {
        if (lambda == 0) {
            gauss.post <- .mcmc.pois.log(data = data, units.m = units.m, 
                meanS = mean.d, invcov = invcov, mcmc.input = mcmc.input, 
                messages.screen = messages.screen)
        }
        else {
            gauss.post <- .mcmc.pois.boxcox(data = data, units.m = units.m, 
                meanS = mean.d, invcov = invcov, mcmc.input = mcmc.input, 
                messages.screen = messages.screen, lambda = lambda)
        }
    }
    else {
        kb.results$posterior$phi <- list()
        if (beta.prior == "flat") {
            if (lambda == 0) {
                gauss.post <- .mcmc.bayes.pois.log(data = data, 
                  units.m = units.m, trend = trend.data, mcmc.input = mcmc.input, 
                  messages.screen = messages.screen, cov.model = cov.model, 
                  kappa = kappa, tausq.rel = tausq.rel, coords = Scoords.transf, 
                  ss.sigma = df.sigmasq * S2.prior, df = df.model, 
                  phi.prior = phi.prior.prob, phi.discrete = phi.discrete)
            }
            else {
                gauss.post <- .mcmc.bayes.pois.boxcox(data = data, 
                  units.m = units.m, trend = trend.data, mcmc.input = mcmc.input, 
                  messages.screen = messages.screen, cov.model = cov.model, 
                  kappa = kappa, tausq.rel = tausq.rel, coords = Scoords.transf, 
                  ss.sigma = df.sigmasq * S2.prior, df = df.model, 
                  phi.prior = phi.prior.prob, phi.discrete = phi.discrete, 
                  lambda = lambda)
            }
        }
        else {
            if (lambda == 0) {
				print('check 2')

                gauss.post <- .mcmc.bayes.conj.pois.log2(data = data, 
                  units.m = units.m, meanS = mean.d, ttvbetatt = ttvbetatt, 
                  mcmc.input = mcmc.input, messages.screen = messages.screen, 
                  cov.model = cov.model, kappa = kappa, tausq.rel = tausq.rel, thetaS=thetaS,
                  Scoords = Scoords.transf, Tcoords = Tcoords, ss.sigma = df.sigmasq * 
                    S2.prior, df = df.model, phi.prior = phi.prior.prob, 
                  phi.discrete = phi.discrete)
				  
				print('check 3')
            }
            else {
                gauss.post <- .mcmc.bayes.conj.pois.boxcox(data = data, 
                  units.m = units.m, meanS = mean.d, ttvbetatt = ttvbetatt, 
                  mcmc.input = mcmc.input, messages.screen = messages.screen, 
                  cov.model = cov.model, kappa = kappa, tausq.rel = tausq.rel, 
                  coords = Scoords.transf, ss.sigma = df.sigmasq * 
                    S2.prior, df = df.model, phi.prior = phi.prior.prob, 
                  phi.discrete = phi.discrete, lambda = lambda)
            }
        }
        kb.results$posterior$phi$sample <- gauss.post$phi.sample
    }
	
	print(names(gauss.post))
    kb.results$posterior$acc.rate <- gauss.post$acc.rate
    gauss.post <- gauss.post$Sdata
    n.sim <- ncol(gauss.post)
    if (inference) {
        if (phi.prior == "fixed") 
            phi.posterior <- list(phi.prior = phi.prior, phi = phi)
        else phi.posterior <- list(phi.prior = phi.prior, phi.discrete = phi.discrete, 
            sample = kb.results$posterior$phi$sample)
		# Enki ------------------------------------------------------------ #
        print('Check 4 :pois.krige.bayes2')
		predict.temp <- .pred.aux2(S = gauss.post, coords = coords, 
            locations = locations, borders = borders, model = model, 
            prior = prior, output = output, phi.posterior = phi.posterior, 
            link = "boxcox")
		print('Check 5 :pois.krige.bayes2')	
		#------------------------------------------------------------------- #	
        temp.post <- predict.temp$temp.post
        if (do.prediction) {
            temp.pred <- predict.temp$temp.pred
            kb.results$predictive$simulations <- predict.temp$pred.simulations
        }
        if (do.prediction) {
            if (!is.null(borders)) {
                nloc0 <- nrow(locations)
                ind.loc0 <- .geoR_inout(locations, borders)
                locations <- locations[ind.loc0, ]
            }
            ni <- nrow(locations)
            d0mat <- loccoords(coords, locations)
            loc.coincide <- (colSums(d0mat < 1e-10) == 1)
            if ((is.logical(quantile.estimator) && (quantile.estimator)) || 
                (is.numeric(quantile.estimator))) {
                predi.q <- .pred.quan.aux(temp.pred, loc.coincide, 
                  df.model, ni, quantile.estimator)
                kb.results$predictive$median <- .BC.inv(predi.q$median, 
                  lambda)
                kb.results$predictive$uncertainty <- (.BC.inv(predi.q$upper, 
                  lambda) - .BC.inv(predi.q$lower, lambda))/4
                if (is.data.frame(predi.q$quantiles)) {
                  names.q <- names(predi.q$quantiles)
                  kb.results$predictive$quantiles <- as.data.frame(.BC.inv(as.matrix(predi.q$quantiles), 
                    lambda))
                  names(kb.results$predictive$quantiles) <- names.q
                }
                else kb.results$predictive$quantiles <- .BC.inv(predi.q$quantiles, 
                  lambda)
            }
            if (!is.null(probability.estimator)) {
                if (lambda == 0) 
                  transf.probab <- ifelse(probability.estimator > 
                    0, log(probability.estimator), -1e+17)
                else transf.probab <- ifelse(probability.estimator > 
                  0, (probability.estimator^lambda - 1)/lambda, 
                  -1e+17)
                len.p <- length(probability.estimator)
                if (len.p == 1) {
                  kb.results$predictive$probability <- round(.pmixed(transf.probab, 
                    temp.pred, df.model), digits = 3)
                }
                else {
                  kb.results$predictive$probability <- matrix(NA, 
                    ni, len.p)
                  for (ii in seq(length = len.p)) {
                    kb.results$predictive$probability[, ii] <- round(.pmixed(transf.probab[ii], 
                      temp.pred, df.model), digits = 3)
                  }
                }
            }
            remove("temp.pred")
            if (messages.screen) 
                cat("pois.krige.bayes: Prediction performed \n")
        }
        else {
            kb.results$predictive <- "no locations to perform prediction were provided"
            if (messages.screen) 
                cat("Only Bayesian estimation of model parameters \n")
        }
		
	# Enki's ------------------------------------------------------ #
	# posterior for thetaS
	
	# ------------------------------------------------------------- #	  			
	print(names(temp.post))
		
        if (beta.prior == "fixed") 
            kb.results$posterior$beta <- paste("provided by user: ", 
                beta)
        else {
            kb.results$posterior$beta <- list()
            kb.results$posterior$beta$mean <- rowMeans(temp.post$beta.mean)
            names(kb.results$posterior$beta$mean) <- beta.names
            kb.results$posterior$beta$var <- rowMeans(temp.post$beta.var, 
                dims = 2) + var(t(temp.post$beta.mean))
            dimnames(kb.results$posterior$beta$var) <- list(beta.names, 
                beta.names)
        }
        if (sigmasq.prior == "fixed") 
            kb.results$posterior$sigmasq <- paste("provided by user: ", 
                sigmasq)
        else {
            kb.results$posterior$sigmasq <- list()
            kb.results$posterior$sigmasq$mean <- mean(temp.post$S2) * 
                df.model/(df.model - 2)
            kb.results$posterior$sigmasq$var <- (mean(temp.post$S2) * 
                2/(df.model - 4) + var(temp.post$S2)) * df.model^2/(df.model - 
                2)^2
        }
        if (phi.prior == "fixed") 
            kb.results$posterior$phi <- paste("provided by user: ", 
                phi)
        else {
            kb.results$posterior$phi$mean <- mean(kb.results$posterior$phi$sample)
            kb.results$posterior$phi$var <- var(kb.results$posterior$phi$sample)
        }
        if (output$sim.posterior) {
            if (beta.size == 1) {
                if (sigmasq.prior == "fixed") {
                  if (beta.prior != "fixed") 
                    kb.results$posterior$beta$sample <- rnorm(n.sim) * 
                      as.vector(sqrt(temp.post$beta.var)) + as.vector(temp.post$beta.mean)
                }
                else {
                  kb.results$posterior$sigmasq$sample <- rinvchisq(n.sim, 
                    df.model, temp.post$S2)
                  if (beta.prior != "fixed") {
                    cond.beta.sd <- sqrt((as.vector(temp.post$beta.var) * 
                      kb.results$posterior$sigmasq$sample)/temp.post$S2)
                    kb.results$posterior$beta$sample <- rnorm(n.sim) * 
                      cond.beta.sd + as.vector(temp.post$beta.mean)
                  }
                }
            }
            else {
                if (sigmasq.prior == "fixed") {
                  if (beta.prior != "fixed") 
                    kb.results$posterior$beta$sample <- array(apply(temp.post$beta.var, 
                      3, .multgauss), dim = c(beta.size, n.sim)) + 
                      temp.post$beta.mean
                }
                else {
                  kb.results$posterior$sigmasq$sample <- rinvchisq(n.sim, 
                    df.model, temp.post$S2)
                  if (beta.prior != "fixed") {
                    if (is.R()) 
                      cond.beta.var <- temp.post$beta.var * rep(kb.results$posterior$sigmasq$sample/temp.post$S2, 
                        rep(beta.size^2, n.sim))
                    else cond.beta.var <- temp.post$beta.var * 
                      rep(kb.results$posterior$sigmasq$sample/temp.post$S2, 
                        each = beta.size^2)
                    kb.results$posterior$beta$sample <- array(apply(cond.beta.var, 
                      3, .multgauss), dim = c(beta.size, n.sim)) + 
                      temp.post$beta.mean
                  }
                }
            }
        }
        remove("temp.post")
    }
    if (output$keep.mcmc.sim) 
        kb.results$posterior$simulations <- .BC.inv(gauss.post, 
            lambda)
    kb.results$model <- model
    kb.results$prior <- prior$priors.info
    kb.results$mcmc.input <- mcmc.input
    kb.results$.Random.seed <- seed
    kb.results$call <- call.fc
    attr(kb.results, "prediction.locations") <- call.fc$locations
    if (do.prediction) 
        attr(kb.results, "sp.dim") <- ifelse(krige1d, "1d", "2d")
    if (!is.null(call.fc$borders)) 
        attr(kb.results, "borders") <- call.fc$borders
    class(kb.results) <- "glm.krige.bayes"
    return(kb.results)
}