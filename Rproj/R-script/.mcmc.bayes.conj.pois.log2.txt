.mcmc.bayes.conj.pois.log2 <- function (data, units.m, meanS, ttvbetatt, mcmc.input, messages.screen, 
    cov.model, kappa, tausq.rel, thetaS, Scoords, Tcoords, ss.sigma, df, phi.prior, 
    phi.discrete) 
{
    n <- length(data)
    S.scale <- mcmc.input$S.scale
    if (any(mcmc.input$S.start == "default")) {
        S <- as.vector(ifelse(data > 0, log(data), 0) - log(units.m)) - 
            meanS
    }
    else {
        if (!any(mcmc.input$S.start == "random")) {
            if (is.numeric(mcmc.input$S.start)) {
                if (length(mcmc.input$S.start) != n) 
                  stop("dimension of mcmc-starting-value must equal dimension of data")
                S <- as.vector(mcmc.input$S.start)
            }
            else stop(" S.start must be a vector of same dimension as data ")
        }
    }
    if (any(mcmc.input$Htrunc == "default")) 
        Htrunc <- 2 * data + 5
    else {
        if (is.vector(mcmc.input$Htrunc) & length(mcmc.input$Htrunc) == 
            n) 
            Htrunc <- mcmc.input$Htrunc
        else Htrunc <- rep(mcmc.input$Htrunc, n)
    }
    burn.in <- mcmc.input$burn.in
    thin <- mcmc.input$thin
    n.iter <- mcmc.input$n.iter
    if (any(mcmc.input$phi.start == "default")) 
        phi <- median(phi.discrete)
    else phi <- mcmc.input$phi.start
    nmphi <- length(phi.discrete)
    if (is.null(mcmc.input$phi.scale)) {
        if (nmphi > 1) 
            stop("mcmc.input$phi.scale not given ")
        else phi.scale <- 0
    }
    else {
        phi.scale <- mcmc.input$phi.scale
        if (nmphi > 1 && pnorm((phi.discrete[nmphi] - phi.discrete[1])/(nmphi - 
            1), sd = sqrt(phi.scale)) > 0.975) 
            warning("Consider making the grid in phi.discrete more dense. The algorithm may have problems moving. ")
    }
    messages.C <- ifelse(messages.screen, 1, 0)
    cov.model.number <- .cor.number(cov.model)
    n.sim <- floor(n.iter/thin)
    if (any(mcmc.input$S.start == "random")) 
        Sdata <- as.double(as.vector(c(rep(0, n.sim * n - 1), 
            1)))
    else Sdata <- as.double(as.vector(c(S, rep(0, (n.sim - 1) * 
        n))))
	# Enki's: problem spot
    result <- .C("newmcmcrun5", as.integer(n), as.double(data), 
        as.double(units.m), as.double(as.vector(meanS)), as.double(as.vector(ttvbetatt)), 
        as.integer(cov.model.number), as.double(kappa), as.double(tausq.rel), as.double(thetaS),
        as.double(Scoords[, 1]), as.double(Scoords[, 2]), as.double(Tcoords[, 1]), as.double(S.scale),  #scoord includes time
        as.double(phi.scale), as.double(Htrunc), as.integer(n.iter), 
        as.integer(thin), as.integer(burn.in), as.integer(messages.C), 
        as.double(ss.sigma), as.integer(df), as.double(phi.prior), 
        as.double(phi.discrete), as.integer(nmphi), Sdata = Sdata, 
        phi.sample = as.double(rep(phi, n.sim)), acc.rate = rep(0, 
            floor(n.iter/1000) + 1), acc.rate.phi = rep(0, floor(n.iter/1000) + 
            1), DUP = FALSE, PACKAGE = "geoRglm2")[c("Sdata", 
        "phi.sample", "acc.rate", "acc.rate.phi")]		
	print('success running in newmcmc5: in .mcmc.bayes.conj.pois.log2')
	
    attr(result$Sdata, "dim") <- c(n, n.sim)
    if (nmphi > 1) 
        result$acc.rate <- cbind(burn.in + seq(0, floor(n.iter/1000)) * 
            1000, result$acc.rate, result$acc.rate.phi)
    else result$acc.rate <- cbind(burn.in + seq(0, floor(n.iter/1000)) * 
        1000, result$acc.rate)
    result$acc.rate.phi <- NULL
    if (burn.in == 0) 
        result$acc.rate <- result$acc.rate[-1, , drop = FALSE]
    if (nmphi > 1) 
        colnames(result$acc.rate) <- c("iter.numb", "Acc.rate", 
            "Acc.rate.phi")
    else colnames(result$acc.rate) <- c("iter.numb", "Acc.rate")
    if (messages.screen) 
        cat(paste("MCMC performed: n.iter. = ", n.iter, "; thinning = ", 
            thin, "; burn.in = ", burn.in, "\n"))
    return(result)
}
